/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


#define QWERTY 0
#define MINE 1
#define RESOLVE 2
#define BASEALPHA 3
#define LMOD 4
#define RMOD 5
#define RMINE 6
#define TRI 7


&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ { 
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

	combos {
		compatible = "zmk,combos";
		combo_mine {
			timeout-ms = <50>;
            key-positions = <2 7 25 26>;
            bindings = <&tog MINE>;
		};
		compatible = "zmk,combos";
		combo_resolve {
			timeout-ms = <50>;
            key-positions = <2 4 7 12>;
            bindings = <&tog RESOLVE>;
		};
	};

    keymap {
            compatible = "zmk,keymap";

       		default_layer {
		bindings = <
		&kp Q &kp W &kp E &kp R &kp T 						&kp Y &kp U &kp I &kp O &kp P
		&kp A &hm LALT S &hm LCTRL D &hm LGUI F &kp G 	    &kp H &hm RGUI J &hm RCTRL K &hm RALT L &kp BKSP
		&kp Z &kp X &kp C &kp V &kp B				        &kp N &kp M  &kp CMMA &kp DOT &mt RSFT RET
          				&mo LMOD &kp LSFT  				&kp SPC &mo RMOD 
		>;
		};

			minecraft {
	    bindings = <
		&kp NUM_1 &kp NUM_2 &kp W &kp E &kp NUM_3 						&kp T &kp F1 &kp F2 &kp F3 &kp F5
		&kp LSFT &kp A &kp S &kp D &kp NUM_4 	    					&kp BSLH &kp C &kp V &kp L &kp F11
		&kp LCTRL &kp NUM_5 &kp Q &kp NUM_6 &kp F				        &kp Z &kp X  &kp ESC &kp V &mt RSFT RET
          				&mo LMOD &kp SPC  				&kp SPC &tog BASEALPHA
		>;
		};

			resolve {
		bindings = <
		&kp LEFT &kp RIGHT &kp J &kp L &kp BKSP 						&kp Y &kp U &kp I &kp O &kp P
		&kp LC(LS(Z)) &kp A &kp B &kp LC(B) &kp DEL 	    &kp H &hm RGUI J &hm RCTRL K &hm RALT L &kp BKSP
		&kp LC(Z) &kp X &kp C &kp V &kp N				        &kp N &kp M  &kp CMMA &kp DOT &mt RSFT RET
          				&kp LCTRL &kp SPC  				&kp SPC &mo BASEALPHA 
		>;
		};

			alpha_no_layers {
		bindings = <
		&kp Q &kp W &kp E &kp R &kp T 						&kp Y &kp U &kp I &kp O &kp P
		&kp A &hm LALT S &hm LCTRL D &hm LGUI F &kp G 	    &kp H &hm RGUI J &hm RCTRL K &hm RALT L &kp BKSP
		&kp Z &kp X &kp C &kp V &kp B				        &kp N &kp M  &kp CMMA &kp DOT &mt RSFT RET
          				&mo LMOD &kp LSFT  				&kp SPC &mo RMINE
		>;
        };


       		left_layer {
		bindings = <
		&kp NUM_1  &kp NUM_2    &kp NUM_3    &kp NUM_4    &kp NUM_5		&kp NUM_6 &kp NUM_7 &kp NUM_8 &kp NUM_9 &kp NUM_0
		&kp TAB    &kp LC(S)    &kp UNDER      &kp SCLN     &trans 		&kp HOME &kp END  &kp LBKT &kp RBKT  &kp DEL
		&kp ESC    &kp TILDE 	&kp GRAVE	 &trans  &trans 	&kp AMPS &kp PIPE &kp FSLH &kp BSLH  &kp QMARK
					    &mo LMOD  &kp LSFT  					&kp RGUI &mo TRI 

		>;
		};
		
			right_layer {
		bindings = <
		&kp BANG  &kp ATSN &kp HASH  &kp DLLR  &kp PRCT    			&kp CRRT  &kp AMPS &kp KMLT &kp LPRN &kp RPRN
		&kp TAB  &kp MINUS &kp UNDER &kp SCLN  &kp COLN 			&trans &kp LBRC  &kp RBRC  &kp DQT &kp QUOT
		&kp ESC  &kp PLUS &kp EQL &kp HOME &kp END    			&trans &kp LEFT &kp DOWN &kp UP  &kp RIGHT
					  &mo TRI &kp LSFT  				&kp SPC  &mo RMOD 
		>;
		};	

			right_game_layer {
		bindings = <
		&kp BANG  &kp ATSN &kp HASH  &kp DLLR  &kp PRCT    			&kp CRRT  &kp AMPS &kp KMLT &kp LPRN &kp RPRN
		&kp TAB  &kp MINUS &kp UNDER &kp SCLN  &kp COLN 			&tog BASEALPHA &kp LBRC  &kp RBRC  &kp DQT &kp QUOT
		&kp ESC  &kp PLUS &kp EQL &kp HOME &kp END    			&trans &kp LEFT &kp DOWN &kp UP  &kp RIGHT
					  &mo TRI &kp LSFT  				&kp SPC  &mo RMINE
		>;
		};	
		
			tri_layer {
	    bindings = <
		&kp F1  &kp F2  &kp F3  &kp F4  &kp F5 				&bt BT_CLR &out OUT_TOG &trans   &kp C_MUTE   &kp C_NEXT
		&kp F6 &kp F7 &kp F8 &kp F9 &kp F10  				&bt BT_NXT &kp C_BRI_UP &kp PG_UP  &kp C_VOL_UP &kp C_PP
		&kp F11 &kp F12 &kp LALT &kp LCTRL &kp LGUI   		&bt BT_PRV &kp C_BRI_DEC &kp PG_DN  &kp C_VOL_DN  &kp C_PREV
					 &trans &trans  					&trans &trans 
		>;
		};	
	};
};
